{"ast":null,"code":"import _asyncToGenerator from \"/Users/erisveltonlima/Desktop/Projetos 2023/criancaFeliz2023/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Directory, Filesystem } from '@capacitor/filesystem';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@capacitor-community/http';\nimport { from } from 'rxjs';\nlet HttpService = class HttpService {\n  constructor() {\n    // Helper function\n    this.convertBlobToBase64 = blob => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.readAsDataURL(blob);\n    });\n  }\n  doGet(url) {\n    const options = {\n      url\n    };\n    return from(Http.get(options));\n  }\n  doPost(url) {\n    const options = {\n      url,\n      method: 'POST'\n    };\n    return from(Http.request(options));\n  }\n  downloadFile() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const path = `${new Date().getTime()}.jpg`;\n      const options = {\n        url: 'https://devdactic.fra1.digitaloceanspaces.com/airbnb-course/category-3.jpg',\n        filePath: path,\n        fileDirectory: Directory.Documents,\n        method: 'GET'\n      };\n      const response = yield Http.downloadFile(options);\n      //console.log(response);\n      if (response.path) {\n        const read = yield Filesystem.readFile({\n          path,\n          directory: Directory.Documents\n        });\n        return `data:image/jpeg;base64, ${read.data}`;\n      } else if (response.blob) {\n        return yield _this.convertBlobToBase64(response.blob);\n      }\n    })();\n  }\n};\nHttpService.ctorParameters = () => [];\nHttpService = __decorate([Injectable({\n  providedIn: 'root'\n})], HttpService);\nexport { HttpService };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,EAAEC,UAAU,QAAQ,uBAAuB;AAC7D,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,IAAI,QAA6C,2BAA2B;AACrF,SAASC,IAAI,QAAoB,MAAM;AAMhC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAEtBC;IA4CA;IACA,wBAAmB,GAAIC,IAAU,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACpE,MAAMC,MAAM,GAAG,IAAIC,UAAU;MAC7BD,MAAM,CAACE,OAAO,GAAGH,MAAM;MACvBC,MAAM,CAACG,MAAM,GAAG,MAAK;QACjBL,OAAO,CAACE,MAAM,CAACI,MAAM,CAAC;MAC1B,CAAC;MACDJ,MAAM,CAACK,aAAa,CAACT,IAAI,CAAC;IAC5B,CAAC,CAAC;EApDc;EAEhBU,KAAK,CAACC,GAAG;IACP,MAAMC,OAAO,GAAgB;MAC3BD;KACD;IAED,OAAOd,IAAI,CAACD,IAAI,CAACiB,GAAG,CAACD,OAAO,CAAC,CAAC;EAChC;EAEAE,MAAM,CAACH,GAAG;IACR,MAAMC,OAAO,GAAgB;MAC3BD,GAAG;MACHI,MAAM,EAAE;KACT;IACD,OAAOlB,IAAI,CAACD,IAAI,CAACoB,OAAO,CAACJ,OAAO,CAAC,CAAC;EACpC;EAEMK,YAAY;IAAA;IAAA;MAChB,MAAMC,IAAI,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,MAAM;MAE1C,MAAMR,OAAO,GAAG;QACdD,GAAG,EAAE,4EAA4E;QACjFU,QAAQ,EAAEH,IAAI;QACdI,aAAa,EAAE7B,SAAS,CAAC8B,SAAS;QAClCR,MAAM,EAAE;OACT;MAED,MAAMS,QAAQ,SAAiC5B,IAAI,CAACqB,YAAY,CAACL,OAAO,CAAC;MACzE;MAEA,IAAGY,QAAQ,CAACN,IAAI,EAAE;QAChB,MAAMO,IAAI,SAAS/B,UAAU,CAACgC,QAAQ,CAAC;UACrCR,IAAI;UACJS,SAAS,EAAElC,SAAS,CAAC8B;SACtB,CAAC;QACF,OAAO,2BAA2BE,IAAI,CAACG,IAAI,EAAE;OAC9C,MAAM,IAAGJ,QAAQ,CAACxB,IAAI,EAAE;QACvB,aAAa,KAAI,CAAC6B,mBAAmB,CAACL,QAAQ,CAACxB,IAAI,CAAW;;IAC/D;EAGH;;;AA5CWF,WAAW,eAJvBH,UAAU,CAAC;EACVmC,UAAU,EAAE;CACb,CAAC,GAEWhC,WAAW,CAwDvB;SAxDYA,WAAW","names":["Directory","Filesystem","Injectable","Http","from","HttpService","constructor","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","doGet","url","options","get","doPost","method","request","downloadFile","path","Date","getTime","filePath","fileDirectory","Documents","response","read","readFile","directory","data","convertBlobToBase64","providedIn"],"sourceRoot":"","sources":["/Users/erisveltonlima/Desktop/Projetos 2023/criancaFeliz2023/src/app/services/http.service.ts"],"sourcesContent":["import { Directory, Filesystem } from '@capacitor/filesystem';\nimport { Injectable } from '@angular/core';\nimport { Http, HttpDownloadFileResult, HttpOptions } from '@capacitor-community/http';\nimport { from, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class HttpService {\n\n  constructor() { }\n\n  doGet(url) {\n    const options: HttpOptions = {\n      url\n    };\n\n    return from(Http.get(options));\n  }\n\n  doPost(url): Observable<any> {\n    const options: HttpOptions = {\n      url,\n      method: 'POST'\n    };\n    return from(Http.request(options));\n  }\n\n  async downloadFile() {\n    const path = `${new Date().getTime()}.jpg`;\n\n    const options = {\n      url: 'https://devdactic.fra1.digitaloceanspaces.com/airbnb-course/category-3.jpg',\n      filePath: path,\n      fileDirectory: Directory.Documents,\n      method: 'GET'\n    }\n\n    const response: HttpDownloadFileResult = await Http.downloadFile(options);\n    //console.log(response);\n\n    if(response.path) {\n      const read = await Filesystem.readFile({\n        path,\n        directory: Directory.Documents\n      });\n      return `data:image/jpeg;base64, ${read.data}`;\n    } else if(response.blob) {\n      return await this.convertBlobToBase64(response.blob) as string;\n    }\n\n\n  }\n\n  // Helper function\n  convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader;\n    reader.onerror = reject;\n    reader.onload = () => {\n        resolve(reader.result);\n    };\n    reader.readAsDataURL(blob);\n  });\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}