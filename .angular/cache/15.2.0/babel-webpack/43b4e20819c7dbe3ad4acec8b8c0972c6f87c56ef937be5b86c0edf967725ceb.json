{"ast":null,"code":"import _asyncToGenerator from \"/Users/erisveltonlima/Desktop/Projetos 2023/criancaFeliz2023/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nexport class ClipboardWeb extends WebPlugin {\n  write(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard) {\n        throw _this.unavailable('Clipboard API not available in this browser');\n      }\n      if (options.string !== undefined) {\n        yield _this.writeText(options.string);\n      } else if (options.url) {\n        yield _this.writeText(options.url);\n      } else if (options.image) {\n        if (typeof ClipboardItem !== 'undefined') {\n          try {\n            const blob = yield (yield fetch(options.image)).blob();\n            const clipboardItemInput = new ClipboardItem({\n              [blob.type]: blob\n            });\n            yield navigator.clipboard.write([clipboardItemInput]);\n          } catch (err) {\n            throw new Error('Failed to write image');\n          }\n        } else {\n          throw _this.unavailable('Writing images to the clipboard is not supported in this browser');\n        }\n      } else {\n        throw new Error('Nothing to write');\n      }\n    })();\n  }\n  read() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard) {\n        throw _this2.unavailable('Clipboard API not available in this browser');\n      }\n      if (typeof ClipboardItem !== 'undefined') {\n        try {\n          const clipboardItems = yield navigator.clipboard.read();\n          const type = clipboardItems[0].types[0];\n          const clipboardBlob = yield clipboardItems[0].getType(type);\n          const data = yield _this2._getBlobData(clipboardBlob, type);\n          return {\n            value: data,\n            type\n          };\n        } catch (err) {\n          return _this2.readText();\n        }\n      } else {\n        return _this2.readText();\n      }\n    })();\n  }\n  readText() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard || !navigator.clipboard.readText) {\n        throw _this3.unavailable('Reading from clipboard not supported in this browser');\n      }\n      const text = yield navigator.clipboard.readText();\n      return {\n        value: text,\n        type: 'text/plain'\n      };\n    })();\n  }\n  writeText(text) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined' || !navigator.clipboard || !navigator.clipboard.writeText) {\n        throw _this4.unavailable('Writting to clipboard not supported in this browser');\n      }\n      yield navigator.clipboard.writeText(text);\n    })();\n  }\n  _getBlobData(clipboardBlob, type) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n      reader.onloadend = () => {\n        const r = reader.result;\n        resolve(r);\n      };\n      reader.onerror = e => {\n        reject(e);\n      };\n    });\n  }\n}","map":{"version":3,"names":["WebPlugin","ClipboardWeb","write","options","navigator","clipboard","unavailable","string","undefined","writeText","url","image","ClipboardItem","blob","fetch","clipboardItemInput","type","err","Error","read","clipboardItems","types","clipboardBlob","getType","data","_getBlobData","value","readText","text","Promise","resolve","reject","reader","FileReader","includes","readAsDataURL","readAsText","onloadend","r","result","onerror","e"],"sources":["/Users/erisveltonlima/Desktop/Projetos 2023/criancaFeliz2023/node_modules/@capacitor/clipboard/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class ClipboardWeb extends WebPlugin {\n    async write(options) {\n        if (typeof navigator === 'undefined' || !navigator.clipboard) {\n            throw this.unavailable('Clipboard API not available in this browser');\n        }\n        if (options.string !== undefined) {\n            await this.writeText(options.string);\n        }\n        else if (options.url) {\n            await this.writeText(options.url);\n        }\n        else if (options.image) {\n            if (typeof ClipboardItem !== 'undefined') {\n                try {\n                    const blob = await (await fetch(options.image)).blob();\n                    const clipboardItemInput = new ClipboardItem({ [blob.type]: blob });\n                    await navigator.clipboard.write([clipboardItemInput]);\n                }\n                catch (err) {\n                    throw new Error('Failed to write image');\n                }\n            }\n            else {\n                throw this.unavailable('Writing images to the clipboard is not supported in this browser');\n            }\n        }\n        else {\n            throw new Error('Nothing to write');\n        }\n    }\n    async read() {\n        if (typeof navigator === 'undefined' || !navigator.clipboard) {\n            throw this.unavailable('Clipboard API not available in this browser');\n        }\n        if (typeof ClipboardItem !== 'undefined') {\n            try {\n                const clipboardItems = await navigator.clipboard.read();\n                const type = clipboardItems[0].types[0];\n                const clipboardBlob = await clipboardItems[0].getType(type);\n                const data = await this._getBlobData(clipboardBlob, type);\n                return { value: data, type };\n            }\n            catch (err) {\n                return this.readText();\n            }\n        }\n        else {\n            return this.readText();\n        }\n    }\n    async readText() {\n        if (typeof navigator === 'undefined' ||\n            !navigator.clipboard ||\n            !navigator.clipboard.readText) {\n            throw this.unavailable('Reading from clipboard not supported in this browser');\n        }\n        const text = await navigator.clipboard.readText();\n        return { value: text, type: 'text/plain' };\n    }\n    async writeText(text) {\n        if (typeof navigator === 'undefined' ||\n            !navigator.clipboard ||\n            !navigator.clipboard.writeText) {\n            throw this.unavailable('Writting to clipboard not supported in this browser');\n        }\n        await navigator.clipboard.writeText(text);\n    }\n    _getBlobData(clipboardBlob, type) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            if (type.includes('image')) {\n                reader.readAsDataURL(clipboardBlob);\n            }\n            else {\n                reader.readAsText(clipboardBlob);\n            }\n            reader.onloadend = () => {\n                const r = reader.result;\n                resolve(r);\n            };\n            reader.onerror = e => {\n                reject(e);\n            };\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}